{"version":3,"sources":["angular-contextual-date.js"],"names":["angular","module","contextualDateDirective","directive","scope","datetime","timezone","restrict","controller","ContextualDateController","controllerAs","template","bindToController","contextualDateService","activate","vm","cDateFormatted","format","this","$inject","contextualDateFilter","filter","value","$filter","$document","invalidate","previousNow","getNow","now","Date","getTime","service","config","buffer","date","fullDateOverride","ldate","parseDate","isNaN","fullDate","relativeDate","formatRelative","hideFullDate","formatFull","formatter","contextualDateFormat","result","replace","nowTime","ldateTime","thresholds","isFuture","isToday","getDate","getMonth","getFullYear","monthThreshold","Math","round","month","thisMonth","setDate","nextMonth","isThisMonth","isNextMonth","yearThreshold","year","thisYear","nextYear","isThisYear","isNextYear","$dateFilter","dateFormats","fullDateFormats","today","future","historical","pad","args","Array","prototype","join","call","arguments","trim","getLang","lang","slang","language","dlang","documentElement","languages","en_US","diff","milliseconds","abs","seconds","minutes","hours","days","weeks","months","years","relative","th","week","day","hour","minute","second","millisecond","prefix","suffix","futurePrefix","futureSuffix","input","isNumber","test","parseInt","factory"],"mappings":"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","file":"angular-contextual-date.min.js","sourcesContent":["(function () {\r\n'use strict';\r\n\r\nangular.module('angular-contextual-date', []);\r\n\r\n})();\r\n\n(function () {\r\n'use strict';\r\n\r\nangular\r\n    .module('angular-contextual-date')\r\n    .directive('contextualDate', contextualDateDirective);\r\n\r\ncontextualDateDirective.$inject = [];\r\nfunction contextualDateDirective () {\r\n    var directive = {\r\n        scope : {\r\n            datetime: \"=\",\r\n            timezone: \"=\"\r\n        },\r\n        restrict: \"EA\",\r\n        controller: ContextualDateController,\r\n        controllerAs: \"CDC\",\r\n        template: \"<span ng-bind='CDC.cDateFormatted'></span>\",\r\n        bindToController: true\r\n    };\r\n\r\n    return directive;\r\n}\r\n\r\nContextualDateController.$inject = ['contextualDateService'];\r\nfunction ContextualDateController (contextualDateService) {\r\n    var vm = this;\r\n\r\n    // Directive variables\r\n    // vm.datetime\r\n    // vm.timezone\r\n\r\n    // Local variables\r\n    vm.cDateFormatted = \"\";\r\n\r\n    activate();\r\n\r\n    function activate () {\r\n        vm.cDateFormatted = contextualDateService.format(\r\n            vm.datetime,\r\n            null, /* overrideDate */\r\n            vm.timezone\r\n        );\r\n    }\r\n}\r\n\r\n})();\r\n\n(function () {\r\n'use strict';\r\n\r\nangular\r\n    .module('angular-contextual-date')\r\n    .filter('contextualDate', contextualDateFilter);\r\n\r\ncontextualDateFilter.$inject = ['contextualDateService'];\r\n\r\nfunction contextualDateFilter (contextualDateService) {\r\n    return filter;\r\n\r\n    function filter (value, timezone) {\r\n        return contextualDateService.format(value, null, timezone);\r\n    }\r\n}\r\n\r\n})();\r\n\n(function () {\r\n'use strict';\r\n\r\nangular\r\n    .module('angular-contextual-date')\r\n    .factory('contextualDateService', contextualDateService);\r\n\r\ncontextualDateService.$inject = [\"$filter\", \"$document\"];\r\n\r\nfunction contextualDateService ($filter, $document) {\r\n    var service = {\r\n        // functions\r\n        format: format,\r\n        formatRelative: formatRelative,\r\n        formatFull: formatFull,\r\n        parseDate: parseDate,\r\n        invalidate: invalidate,\r\n\r\n        // configurations\r\n        config: {\r\n            hideFullDate : false,\r\n\r\n            fullDateFormats : {\r\n                today: \"h:mm a\",\r\n\r\n                thisMonth: \"MMM d 'at' h:mm a\",\r\n                thisYear: \"MMM d\",\r\n                historical: \"MMM d, y\",\r\n\r\n                nextMonth: \"MMM d 'at' h:mm a\",\r\n                nextYear: \"MMM d, y\",\r\n                future: \"MMM d, y\"\r\n            },\r\n\r\n            contextualDateFormat: \"%fullDate% (%relativeDate%)\",\r\n\r\n            language: null, // this will hard set the language\r\n\r\n            // These will determine the leniency given to assigning\r\n            // the values. e.g. a threshold of 0.75 for year means\r\n            // it will start saying \"1 year ago\" after 9 months\r\n            thresholds: {\r\n                years: 1.75,\r\n                year: 0.75,\r\n                months: 1.75,\r\n                month: 0.9,\r\n                weeks: 1.75,\r\n                week: 1.0,\r\n                days: 2.0,\r\n                day: 1.0,\r\n                hours: 2.0,\r\n                hour: 1.0,\r\n                minutes: 2.0,\r\n                minute: 1.0,\r\n                seconds: 2.0,\r\n                second: 1.0,\r\n                milliseconds: 2.0,\r\n                millisecond: 1.0,\r\n\r\n                // anything less than this threshold will use the text for 'now'\r\n                // e.g. 60000 will display 'just now' for any date within a minute\r\n                // of the current time\r\n                now: 0  // milliseconds\r\n            },\r\n\r\n            // The buffer time to re-calculate the relative time.  This prevents\r\n            // the digest loop from calculating a different value the next time it\r\n            // runs for dates which are very close to now.\r\n            buffer: 250  // milliseconds\r\n        },\r\n\r\n        // language support\r\n        languages : {\r\n            'en_US': {\r\n\r\n                now: \"just now\",\r\n\r\n                // for past/future\r\n                prefix: \"\",\r\n                suffix: \"ago\",\r\n                futurePrefix: \"\",\r\n                futureSuffix: \"from now\",\r\n                \r\n                millisecond: \"millisecond\",\r\n                milliseconds: \"milliseconds\",\r\n                second: \"second\",\r\n                seconds: \"seconds\",\r\n                minute: \"minute\",\r\n                minutes: \"minutes\",\r\n                hour: \"hour\",\r\n                hours: \"hours\",\r\n                day: \"day\",\r\n                days: \"days\",\r\n                week: \"week\",\r\n                weeks: \"weeks\",\r\n                month: \"month\",\r\n                months: \"months\",\r\n                year: \"year\",\r\n                years: \"years\"\r\n            }\r\n        }\r\n    };\r\n\r\n    var previousNow;\r\n\r\n    return service;\r\n\r\n    function invalidate () {\r\n        previousNow = null;\r\n    }\r\n\r\n    function getNow (now) {\r\n        now = now || new Date();\r\n        previousNow = previousNow || new Date();\r\n        if (now.getTime() - service.config.buffer < previousNow.getTime()) {\r\n            now = previousNow;\r\n        } else {\r\n            previousNow = now;\r\n        }\r\n        return now;\r\n    }\r\n\r\n    function format (date, fullDateOverride, timezone) {\r\n        var ldate = service.parseDate(date);\r\n\r\n        // We weren't able to parse the date, just return as is\r\n        if (isNaN(ldate)) { return date; }\r\n\r\n        var now = getNow();\r\n        var fullDate, relativeDate;\r\n\r\n        relativeDate = service.formatRelative(ldate, now);\r\n\r\n        if (service.config.hideFullDate) {\r\n            return relativeDate;\r\n        }\r\n\r\n        if (fullDateOverride) {\r\n            fullDate = fullDateOverride;\r\n        } else {\r\n            fullDate = service.formatFull(ldate, now, timezone);\r\n        }\r\n\r\n        var formatter = service.config.contextualDateFormat;\r\n        var result = formatter.replace('%fullDate%', fullDate)\r\n                              .replace('%relativeDate%', relativeDate);\r\n\r\n        return result;\r\n    }\r\n\r\n    function formatFull(date, now, timezone) {\r\n        var ldate = service.parseDate(date);\r\n        if (isNaN(ldate)) { return date; }\r\n\r\n        now = getNow(now);\r\n        var nowTime = now.getTime();\r\n        var ldateTime = ldate.getTime();\r\n\r\n        var fullDate = \"\";\r\n        var thresholds = service.config.thresholds;\r\n\r\n        // isFuture\r\n        var isFuture = (ldate.getTime() - now.getTime() > 0);\r\n\r\n        // current day\r\n        var isToday = (ldate.getDate() === now.getDate() &&\r\n                                        ldate.getMonth() === now.getMonth() &&\r\n                                        ldate.getFullYear() === now.getFullYear());\r\n        \r\n        // month\r\n        var monthThreshold = Math.round(thresholds.month * 31);\r\n        var thisMonth = new Date(nowTime);\r\n        thisMonth.setDate(thisMonth.getDate() - monthThreshold);\r\n        var nextMonth = new Date(nowTime);\r\n        nextMonth.setDate(nextMonth.getDate() + monthThreshold);\r\n        var isThisMonth = (!isFuture && ldateTime - thisMonth.getTime() >= 0);\r\n        var isNextMonth = (isFuture && nextMonth.getTime() - ldateTime >= 0);\r\n\r\n        // year\r\n        var yearThreshold = Math.round(thresholds.year * 365);\r\n        var thisYear = new Date(nowTime);\r\n        thisYear.setDate(thisYear.getDate() - yearThreshold);\r\n        var nextYear = new Date(nowTime);\r\n        nextYear.setDate(nextYear.getDate() + yearThreshold);\r\n        var isThisYear = (!isFuture && ldateTime - thisYear.getTime() >= 0);\r\n        var isNextYear = (isFuture && nextYear.getTime() - ldateTime >= 0);\r\n\r\n        var $dateFilter = $filter('date');\r\n        var dateFormats = service.config.fullDateFormats;\r\n\r\n        if (isToday) {\r\n            fullDate = $dateFilter(ldate, dateFormats.today, timezone);\r\n        } \r\n        else if (isThisMonth) {\r\n            fullDate = $dateFilter(ldate, dateFormats.thisMonth, timezone);\r\n        }\r\n        else if (isNextMonth) {\r\n            fullDate = $dateFilter(ldate, dateFormats.nextMonth, timezone);\r\n        }\r\n        else if (isThisYear) {\r\n            fullDate = $dateFilter(ldate, dateFormats.thisYear, timezone);\r\n        }\r\n        else if (isNextYear) {\r\n            fullDate = $dateFilter(ldate, dateFormats.nextYear, timezone);\r\n        }\r\n        else {\r\n            if (isFuture) {\r\n                fullDate = $dateFilter(ldate, dateFormats.future, timezone);\r\n            } else {\r\n                fullDate = $dateFilter(ldate, dateFormats.historical, timezone);\r\n            }\r\n        }\r\n\r\n        return fullDate;\r\n    }\r\n\r\n    function pad(args) {\r\n        return Array.prototype.join.call(arguments, \" \").trim();\r\n    }\r\n\r\n    function getLang() {\r\n        var slang = service.config.language;\r\n        var dlang = $document[0].documentElement.lang;\r\n        var lang;\r\n\r\n        if (slang) {\r\n            lang = service.languages[slang];\r\n        }\r\n        if (!lang && dlang) {\r\n            lang = service.languages[dlang];\r\n        }\r\n        if (!lang) {\r\n            lang = service.languages.en_US;\r\n        }\r\n\r\n        return lang;\r\n    }\r\n\r\n    function formatRelative(date, now) {\r\n        var ldate = service.parseDate(date);\r\n        if (isNaN(ldate)) { return date; }\r\n        now = getNow(now);\r\n\r\n        var lang = getLang();\r\n        var diff = now.getTime() - ldate.getTime();\r\n\r\n        var milliseconds = Math.abs(diff);\r\n        var seconds = milliseconds / 1000;\r\n        var minutes = seconds / 60;\r\n        var hours = minutes / 60;\r\n        var days = hours / 24;\r\n        var weeks = days / 7;\r\n        var months = days / 30;\r\n        var years = days / 365;\r\n\r\n        var relative = \"\";\r\n\r\n        var th = service.config.thresholds;\r\n\r\n        if (milliseconds <= th.now) {\r\n            relative = lang.now;\r\n        } else {\r\n            if (years >= th.years) {\r\n                relative = pad(Math.round(years), lang.years);\r\n            } else if (years >= th.year) {\r\n                relative = pad(1, lang.year);\r\n            } else if (months >= th.months) {\r\n                relative = pad(Math.round(months), lang.months);\r\n            } else if (months >= th.month) {\r\n                relative = pad(1, lang.month);\r\n            } else if (weeks >= th.weeks) {\r\n                relative = pad(Math.round(weeks), lang.weeks);\r\n            } else if (weeks >= th.week) {\r\n                relative = pad(1, lang.week);\r\n            } else if (days >= th.days) {\r\n                relative = pad(Math.round(days), lang.days);\r\n            } else if (days >= th.day) {\r\n                relative = pad(1, lang.day);\r\n            } else if (hours >= th.hours) {\r\n                relative = pad(Math.round(hours), lang.hours);\r\n            } else if (hours >= th.hour) {\r\n                relative = pad(1, lang.hour);\r\n            } else if (minutes >= th.minutes) {\r\n                relative = pad(Math.round(minutes), lang.minutes);\r\n            } else if (minutes >= th.minute) {\r\n                relative = pad(1, lang.minute);\r\n            } else if (seconds >= th.seconds) {\r\n                relative = pad(Math.round(seconds), lang.seconds);\r\n            } else if (seconds >= th.second) {\r\n                relative = pad(1, lang.second);\r\n            } else if (milliseconds >= th.milliseconds) {\r\n                relative = pad(Math.round(milliseconds), lang.milliseconds);\r\n            } else if (milliseconds >= th.millisecond) {\r\n                relative = pad(1, lang.millisecond);\r\n            }\r\n\r\n            if (!relative) {\r\n                relative = lang.now;\r\n            } else {\r\n                if (diff >= 0) {\r\n                    relative = pad(lang.prefix, relative, lang.suffix);\r\n                } else {\r\n                    relative = pad(lang.futurePrefix, relative, lang.futureSuffix);\r\n                }\r\n            }\r\n        }\r\n\r\n        return relative;\r\n    }\r\n\r\n    function parseDate (input) {\r\n        if (input instanceof Date) {\r\n            return input;\r\n        // date.getTime();\r\n        } else if (angular.isNumber(input)) {\r\n            return new Date(input);\r\n        // date.getTime(); as string\r\n        } else if (/^\\d+$/.test(input)) {\r\n            return new Date(parseInt(input, 10));\r\n        // ISO / UTC\r\n        } else {\r\n            return new Date(input);\r\n        }\r\n    }\r\n}\r\n\r\n})();\r\n"],"sourceRoot":"/source/"}